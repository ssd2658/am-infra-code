name: Terraform Infrastructure Deployment Router

on:
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: 'Cloud Provider to Deploy'
        required: true
        type: choice
        default: 'gcp'
        options:
          - gcp
          - azure
          - both

      project_id:
        description: 'Project/Subscription ID'
        required: false
        type: string

      region:
        description: 'Cloud Region'
        required: true
        default: 'us-central1'
        type: string

      cluster_name:
        description: 'Kubernetes Cluster Name'
        required: true
        default: 'portfolio-cluster'
        type: string

      database_name:
        description: 'Database Name'
        required: true
        default: 'portfolio-database'
        type: string

      environment:
        description: 'Deployment Environment'
        required: true
        default: 'preprod'
        type: choice
        options:
          - dev
          - preprod
          - prod

# Define default values for secrets
env:
  DEFAULT_GCP_PROJECT: ${{ secrets.DEFAULT_GCP_PROJECT || '' }}
  DEFAULT_AZURE_SUBSCRIPTION_ID: ${{ secrets.DEFAULT_AZURE_SUBSCRIPTION_ID || '' }}

jobs:
  determine-providers:
    name: Determine Cloud Providers to Deploy
    runs-on: ubuntu-latest
    outputs:
      providers: ${{ steps.set-providers.outputs.providers }}
      default_gcp_project: ${{ steps.set-default-project.outputs.default_gcp_project }}
    steps:
      - name: Set Providers to Deploy
        id: set-providers
        shell: bash
        run: |
          case "${{ github.event.inputs.cloud_provider }}" in
            "both")
              echo "providers=['gcp', 'azure']" >> $GITHUB_OUTPUT
              ;;
            "gcp")
              echo "providers=['gcp']" >> $GITHUB_OUTPUT
              ;;
            "azure")
              echo "providers=['azure']" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "providers=['gcp']" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Set Default GCP Project
        id: set-default-project
        run: |
          default_project="${{ github.event.inputs.project_id || secrets.DEFAULT_GCP_PROJECT }}"
          echo "default_gcp_project=$default_project" >> $GITHUB_OUTPUT

   

  gcp-deployment:
    name: Deploy to GCP
    needs: determine-providers
    if: contains(fromJson(needs.determine-providers.outputs.providers), 'gcp')
    uses: ./.github/workflows/gcp-deployment.yml
    with:
      project_id: ${{ needs.determine-providers.outputs.default_gcp_project }}
      region: ${{ github.event.inputs.region || 'us-central1' }}
      cluster_name: ${{ github.event.inputs.cluster_name || format('{0}-{1}-gcp', 'portfolio', github.event.inputs.environment || 'preprod') }}
      database_name: ${{ github.event.inputs.database_name || format('{0}-{1}-gcp-db', 'portfolio', github.event.inputs.environment || 'preprod') }}
      environment: ${{ github.event.inputs.environment || 'preprod' }}
    secrets:
      DB_ADMIN_PASSWORD: ${{ secrets.DB_ADMIN_PASSWORD }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  # azure-deployment:
  #   name: Deploy to Azure
  #   needs: determine-providers
  #   if: contains(fromJson(needs.determine-providers.outputs.providers), 'azure')
  #   uses: ./.github/workflows/azure-deployment.yml
  #   with:
  #     project_id: ${{ github.event.inputs.project_id || env.DEFAULT_AZURE_SUBSCRIPTION_ID }}
  #     region: ${{ github.event.inputs.region || 'eastus' }}
  #     cluster_name: ${{ github.event.inputs.cluster_name || format('{0}-{1}-azure', 'portfolio', github.event.inputs.environment || 'preprod') }}
  #     database_name: ${{ github.event.inputs.database_name || format('{0}-{1}-azure-db', 'portfolio', github.event.inputs.environment || 'preprod') }}
  #     environment: ${{ github.event.inputs.environment || 'preprod' }}
  #   secrets:
  #     DB_ADMIN_PASSWORD: ${{ secrets.DB_ADMIN_PASSWORD }}
  #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  validate-input:
    name: Validate Deployment Input
    needs: determine-providers
    runs-on: ubuntu-latest
    steps:
      - name: Check Input Validity
        run: |
          providers='${{ needs.determine-providers.outputs.providers }}'
          echo "Selected providers: $providers"
          
          if [[ "$providers" == '[]' ]]; then
            echo "Error: No valid cloud providers selected"
            exit 1
          fi

  final-status:
    name: Deployment Status
    needs:
      - validate-input
      - gcp-deployment
      #- azure-deployment
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check Deployment Status
        run: |
          echo "Providers deployed: ${{ needs.determine-providers.outputs.providers }}"
          
          gcp_result="${{ needs.gcp-deployment.result }}"
          azure_result="${{ needs.azure-deployment.result }}"
          
          if [[ "$gcp_result" == "success" || "$azure_result" == "success" ]]; then
            echo "Deployment successful"
            exit 0
          else
            echo "Deployment failed"
            exit 1
          fi
      
      - name: Send Comprehensive Notification
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
